{"version":3,"sources":["components/Header.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["Header","value","onAdd","handleChange","inputRef","handleKeyDown","className","type","onChange","e","placeholder","ref","onKeyDown","onClick","TodoItem","id","text","isComplete","toggleTodo","removeTodo","checked","TodoList","todos","map","todo","App","useState","setValue","setTodos","useRef","useEffect","current","focus","savedTodos","localStorage","getItem","JSON","parse","setItem","stringify","addTodo","trim","nanoid","style","maxWidth","target","key","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAQaA,EAAiC,SAAC,GAMxC,IALHC,EAKE,EALFA,MACAC,EAIE,EAJFA,MACAC,EAGE,EAHFA,aACAC,EAEE,EAFFA,SACAC,EACE,EADFA,cAEA,OACI,yBAAQC,UAAU,oBAAlB,UACI,uBACIC,KAAK,OACLD,UAAU,eACVE,SAAU,SAAAC,GAAC,OAAIN,EAAaM,IAC5BC,YAAY,mBACZT,MAAOA,EACPU,IAAKP,EACLQ,UAAW,SAAAH,GAAC,OAAIJ,EAAcI,MAElC,wBAAQI,QAASX,EAAOI,UAAU,kBAAlC,qBCnBCQ,EAAiC,SAAC,GAMxC,IALHC,EAKE,EALFA,GACAC,EAIE,EAJFA,KACAC,EAGE,EAHFA,WACAC,EAEE,EAFFA,WACAC,EACE,EADFA,WAEA,OACI,sBAAKb,UAAU,sDAAf,UACI,uBACIC,KAAK,WACLa,QAASH,EACTT,SAAU,kBAAMU,EAAWH,MAE/B,mBAAGT,UAAU,kBAAb,SAAgCU,IAChC,wBAAQH,QAAS,kBAAMM,EAAWJ,IAAKT,UAAU,kBCbhDe,EAAqC,SAAC,GAI5C,IAHHC,EAGE,EAHFA,MACAJ,EAEE,EAFFA,WACAC,EACE,EADFA,WAEA,OACI,8BACKG,EAAMC,KAAI,SAAAC,GAAI,OACX,cAAC,EAAD,aAEIN,WAAYA,EACZC,WAAYA,GACRK,GAHCA,EAAKT,U,OCiEfU,EA7EO,WAClB,MAA0BC,mBAAS,IAAnC,mBAAOzB,EAAP,KAAc0B,EAAd,KACA,EAA0BD,mBAAkB,IAA5C,mBAAOJ,EAAP,KAAcM,EAAd,KAEMxB,EAAWyB,iBAAyB,MAE1CC,qBAAU,WACF1B,EAAS2B,SAAS3B,EAAS2B,QAAQC,QAEvC,IAAMC,EAAaC,aAAaC,QAAQ,gCACpCF,GAAYL,EAASQ,KAAKC,MAAMJ,MACrC,IAEHH,qBAAU,WACNI,aAAaI,QACT,+BACAF,KAAKG,UAAUjB,MAEpB,CAACA,IAEJ,IAAMkB,EAAU,WACRvC,EAAMwC,SACNb,EAAS,GAAD,mBACDN,GADC,CAEJ,CACIP,GAAI2B,cACJ1B,KAAMf,EACNgB,YAAY,MAGpBU,EAAS,MA4BjB,OACI,sBAAKrB,UAAU,YAAYqC,MAAO,CAACC,SAAS,SAA5C,UACI,cAAC,EAAD,CACI3C,MAAOA,EACPC,MAAOsC,EACPrC,aAbS,SAACM,GAClBkB,EAASlB,EAAEoC,OAAO5C,QAaVG,SAAUA,EACVC,cAXU,SAACI,GACL,UAAVA,EAAEqC,KAAiBN,OAanB,cAAC,EAAD,CACIlB,MAAOA,EACPH,WApCO,SAACJ,GAChBa,EAASN,EAAMyB,QAAO,SAACvB,GAAD,OAAiBA,EAAKT,KAAOA,OAoC3CG,WAjCO,SAACH,GAChBa,EACIN,EAAMC,KAAI,SAACC,GACP,OAAIA,EAAKT,KAAOA,EAAWS,EACpB,2BACAA,GADP,IAEIP,YAAaO,EAAKP,wB,MC5CtC+B,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.7b941db5.chunk.js","sourcesContent":["interface IHeaderProps {\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    onAdd: () => void;\n    value: string;\n    inputRef: React.LegacyRef<HTMLInputElement>;\n    handleKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\nexport const Header: React.FC<IHeaderProps> = ({\n    value,\n    onAdd,\n    handleChange,\n    inputRef,\n    handleKeyDown,\n}) => {\n    return (\n        <header className='d-flex gap-3 my-5'>\n            <input\n                type=\"text\"\n                className='form-control'\n                onChange={e => handleChange(e)}\n                placeholder=\"add new todo ...\"\n                value={value}\n                ref={inputRef}\n                onKeyDown={e => handleKeyDown(e)}\n            />\n            <button onClick={onAdd} className='btn btn-primary'>Add</button>\n        </header>\n    );\n};\n","import { ITodo } from '../types/types';\n\ninterface ITodoProps extends ITodo {\n    toggleTodo: (id: string) => void;\n    removeTodo: (id: string) => void;\n}\n\nexport const TodoItem: React.FC<ITodoProps> = ({\n    id,\n    text,\n    isComplete,\n    toggleTodo,\n    removeTodo,\n}) => {\n    return (\n        <div className=\"d-flex align-items-center gap-5 alert alert-warning\">\n            <input\n                type=\"checkbox\"\n                checked={isComplete}\n                onChange={() => toggleTodo(id)}\n            />\n            <p className='flex-grow-1 m-0'>{text}</p>\n            <button onClick={() => removeTodo(id)} className=\"btn-close\" />\n        </div>\n    );\n};\n","import { TodoItem } from './TodoItem';\nimport { ITodo } from '../types/types';\n\ninterface ITodoListProps {\n    todos: ITodo[];\n    toggleTodo: (id: string) => void;\n    removeTodo: (id: string) => void;\n}\n\nexport const TodoList: React.FC<ITodoListProps> = ({\n    todos,\n    toggleTodo,\n    removeTodo,\n}) => {\n    return (\n        <div>\n            {todos.map(todo => (\n                <TodoItem\n                    key={todo.id}\n                    toggleTodo={toggleTodo}\n                    removeTodo={removeTodo}\n                    {...todo}\n                />\n            ))}\n        </div>\n    );\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\nimport { nanoid } from 'nanoid';\nimport { ITodo } from './types/types';\n\nconst App: React.FC = () => {\n    const [value, setValue] = useState('');\n    const [todos, setTodos] = useState<ITodo[]>([]);\n\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        if (inputRef.current) inputRef.current.focus();\n\n        const savedTodos = localStorage.getItem('typesript-react-todolist-app');\n        if (savedTodos) setTodos(JSON.parse(savedTodos));\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem(\n            'typesript-react-todolist-app',\n            JSON.stringify(todos)\n        );\n    }, [todos]);\n\n    const addTodo = () => {\n        if (value.trim()) {\n            setTodos([\n                ...todos,\n                {\n                    id: nanoid(),\n                    text: value,\n                    isComplete: false,\n                },\n            ]);\n            setValue('');\n        }\n    };\n\n    const removeTodo = (id: string) => {\n        setTodos(todos.filter((todo: ITodo) => todo.id !== id));\n    };\n\n    const toggleTodo = (id: string) => {\n        setTodos(\n            todos.map((todo: ITodo) => {\n                if (todo.id !== id) return todo;\n                return {\n                    ...todo,\n                    isComplete: !todo.isComplete,\n                };\n            })\n        );\n    };\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(e.target.value);\n    };\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') addTodo();\n    };\n\n    return (\n        <div className='container' style={{maxWidth:'960px'}}>\n            <Header\n                value={value}\n                onAdd={addTodo}\n                handleChange={handleChange}\n                inputRef={inputRef}\n                handleKeyDown={handleKeyDown}\n            />\n\n            <TodoList\n                todos={todos}\n                removeTodo={removeTodo}\n                toggleTodo={toggleTodo}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}